{"version":3,"sources":["utilities.js","App.js","serviceWorker.js","index.js"],"names":["fingerPoints","thumb","indexFinger","middleFinger","ring","pinky","drawHand","predictions","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstjointindex","secondjointindex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","App","webcamRef","useRef","canvasRef","runHandpose","a","handpose","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","height","width","estimateHands","hand","getContext","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d00cb4b.chunk.js","sourcesContent":["\nconst fingerPoints = {\n    thumb:[0,1,2,3,4],\n    indexFinger:[0,5,6,7,8],\n    middleFinger:[0,9,10,11,12],\n    ring:[0,13,14,15,16],\n    pinky:[0,17,18,19,20],\n};\n\nexport const drawHand = (predictions,ctx) => {\n    \n    if(predictions.length>0){\n        \n        predictions.forEach((prediction)=>{\n            const landmarks = prediction.landmarks;\n\n            for (let j=0; j < Object.keys(fingerPoints).length;j++){\n                let finger = Object.keys(fingerPoints)[j] ;\n\n                for(let k=0;k<fingerPoints[finger].length -1 ; k++){\n                    const firstjointindex=fingerPoints[finger][k];\n                    const secondjointindex=fingerPoints[finger][k+1];\n\n\n                    ctx.beginPath();\n                    ctx.moveTo(\n                        landmarks[firstjointindex][0],\n                        landmarks[firstjointindex][1],\n                    );\n\n                    ctx.lineTo(\n                        landmarks[secondjointindex][0],\n                        landmarks[secondjointindex][1],\n\n                        \n                    )\n\n                    ctx.strokeStyle=\"plum\"\n                    ctx.lineWidth=4\n                    ctx.stroke();\n                }\n            }\n\n            for(let i=0; i<landmarks.length; i++){\n                const x = landmarks[i] [0]\n                const y = landmarks[i] [1]\n\n                ctx.beginPath()\n                ctx.arc(x, y, 5, 0, 3*Math.PI);\n\n                ctx.fillStyle = \"indigo\";\n                ctx.fill();\n\n            }\n\n\n        });\n    }\n\n};\n","import React,{useRef} from 'react';\n//dimport logo from './logo.svg';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport './App.css';\nimport {drawHand} from \"./utilities\";\n\nfunction App() {\n\n  const webcamRef=useRef(null);\n  const canvasRef=useRef(null);\n\n  const runHandpose= async() =>{\n    const net = await handpose.load()\n    console.log(\"Handpose model loaded\")\n\n    setInterval(() => {\n      detect(net)\n    }, 100);\n\n  }\n\n  const detect = async(net) =>{\n    if(typeof webcamRef.current !=\"undefined\" &&\n    webcamRef.current != null &&\n    webcamRef.current.video.readyState===4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight=webcamRef.current.video.videoHeight; \n\n      webcamRef.current.video.height=videoHeight;\n      webcamRef.current.video.width=videoWidth;\n\n      canvasRef.current.width=videoWidth;\n      canvasRef.current.height=videoHeight;\n\n      const hand = await net.estimateHands(video);\n      console.log(hand)\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand,ctx); \n    }\n\n\n  };\n\n  runHandpose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam \n        ref={webcamRef}\n      style={\n        {\n        position:\"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left:0,\n        right:0,\n        textAlign:\"center\",\n        zIndex:9,\n        width:640,\n        height:480\n      }\n\n      } />\n      <canvas \n      ref={canvasRef}\n      style={\n        {\n        position:\"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left:0,\n        right:0,\n        textAlign:\"center\",\n        zIndex:9,\n        width:640,\n        height:480,\n\n        }\n\n      } />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}